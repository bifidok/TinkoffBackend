/*
 * This file is generated by jOOQ.
 */

package edu.java.scrapper.repositories.jooq.generated.tables.records;

import edu.java.scrapper.repositories.jooq.generated.tables.Questions;
import jakarta.validation.constraints.NotNull;
import java.beans.ConstructorProperties;
import javax.annotation.processing.Generated;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class QuestionsRecord extends UpdatableRecordImpl<QuestionsRecord> implements Record3<Long, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>QUESTIONS.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>QUESTIONS.ID</code>.
     */
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>QUESTIONS.LINK_ID</code>.
     */
    public void setLinkId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>QUESTIONS.LINK_ID</code>.
     */
    public Integer getLinkId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>QUESTIONS.ANSWER_COUNT</code>.
     */
    public void setAnswerCount(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>QUESTIONS.ANSWER_COUNT</code>.
     */
    @NotNull
    public Integer getAnswerCount() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Questions.QUESTIONS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Questions.QUESTIONS.LINK_ID;
    }

    @Override
    public Field<Integer> field3() {
        return Questions.QUESTIONS.ANSWER_COUNT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getLinkId();
    }

    @Override
    public Integer component3() {
        return getAnswerCount();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getLinkId();
    }

    @Override
    public Integer value3() {
        return getAnswerCount();
    }

    @Override
    public QuestionsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public QuestionsRecord value2(Integer value) {
        setLinkId(value);
        return this;
    }

    @Override
    public QuestionsRecord value3(Integer value) {
        setAnswerCount(value);
        return this;
    }

    @Override
    public QuestionsRecord values(Long value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QuestionsRecord
     */
    public QuestionsRecord() {
        super(Questions.QUESTIONS);
    }

    /**
     * Create a detached, initialised QuestionsRecord
     */
    @ConstructorProperties({"id", "linkId", "answerCount"})
    public QuestionsRecord(Long id, Integer linkId, Integer answerCount) {
        super(Questions.QUESTIONS);

        setId(id);
        setLinkId(linkId);
        setAnswerCount(answerCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised QuestionsRecord
     */
    public QuestionsRecord(edu.java.scrapper.repositories.jooq.generated.tables.pojos.Questions value) {
        super(Questions.QUESTIONS);

        if (value != null) {
            setId(value.getId());
            setLinkId(value.getLinkId());
            setAnswerCount(value.getAnswerCount());
            resetChangedOnNotNull();
        }
    }
}
