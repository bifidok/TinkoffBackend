/*
 * This file is generated by jOOQ.
 */

package edu.java.scrapper.repositories.jooq.generated.tables.records;

import edu.java.scrapper.repositories.jooq.generated.tables.Links;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;
import javax.annotation.processing.Generated;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class LinksRecord extends UpdatableRecordImpl<LinksRecord>
    implements Record4<Integer, String, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LINKS.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>LINKS.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>LINKS.URL</code>.
     */
    public void setUrl(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>LINKS.URL</code>.
     */
    @NotNull
    @Size(max = 1000000000)
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>LINKS.LAST_ACTIVITY</code>.
     */
    public void setLastActivity(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>LINKS.LAST_ACTIVITY</code>.
     */
    @NotNull
    public OffsetDateTime getLastActivity() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>LINKS.LAST_CHECK_TIME</code>.
     */
    public void setLastCheckTime(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>LINKS.LAST_CHECK_TIME</code>.
     */
    @NotNull
    public OffsetDateTime getLastCheckTime() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Links.LINKS.ID;
    }

    @Override
    public Field<String> field2() {
        return Links.LINKS.URL;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Links.LINKS.LAST_ACTIVITY;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Links.LINKS.LAST_CHECK_TIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUrl();
    }

    @Override
    public OffsetDateTime component3() {
        return getLastActivity();
    }

    @Override
    public OffsetDateTime component4() {
        return getLastCheckTime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUrl();
    }

    @Override
    public OffsetDateTime value3() {
        return getLastActivity();
    }

    @Override
    public OffsetDateTime value4() {
        return getLastCheckTime();
    }

    @Override
    public LinksRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public LinksRecord value2(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public LinksRecord value3(OffsetDateTime value) {
        setLastActivity(value);
        return this;
    }

    @Override
    public LinksRecord value4(OffsetDateTime value) {
        setLastCheckTime(value);
        return this;
    }

    @Override
    public LinksRecord values(Integer value1, String value2, OffsetDateTime value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LinksRecord
     */
    public LinksRecord() {
        super(Links.LINKS);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    @ConstructorProperties({"id", "url", "lastActivity", "lastCheckTime"})
    public LinksRecord(Integer id, String url, OffsetDateTime lastActivity, OffsetDateTime lastCheckTime) {
        super(Links.LINKS);

        setId(id);
        setUrl(url);
        setLastActivity(lastActivity);
        setLastCheckTime(lastCheckTime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    public LinksRecord(edu.java.scrapper.repositories.jooq.generated.tables.pojos.Links value) {
        super(Links.LINKS);

        if (value != null) {
            setId(value.getId());
            setUrl(value.getUrl());
            setLastActivity(value.getLastActivity());
            setLastCheckTime(value.getLastCheckTime());
            resetChangedOnNotNull();
        }
    }
}
