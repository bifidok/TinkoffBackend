app:
  scrapper-topic: messages.update
  scrapper-base-url: http://localhost:8080/
  telegram-token:
  commands:
    start: start chat bot
    help: show available commands
    track: add link to tracking
    untrack: remove link from tracking
    list: show list of trackable links

kafka:
  bootstrap-servers: 0.0.0.0:29091,0.0.0.0:29092,0.0.0.0:29093
  group-id: messages-group
  dlq-topic: messages.update_dlq

management:
  metrics:
    tags:
      application: ${spring.application.name}
  server:
    port: 8091
  endpoints:
    web:
      base-path: /
      exposure:
        include:
          - health
          - info
          - prometheus
      path-mapping:
        prometheus: "metrics"

client:
  retry: constant
  initial-delay: 1000
  max-delay: 15000
  increment: 3000
  max-attempts: 4
  codes: 500,502,503,504

bucket4j:
  enabled: true
  filters:
    - cache-name: buckets
      url: (/updates.*)
      strategy: first
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: "getRemoteAddr()"
          bandwidths:
            - capacity: 10
              time: 10
              unit: seconds
              refill-speed: interval
          skip-condition: '@rateLimiterService.isSkipped(getRemoteAddr())'

rate-limiter:
  whitelist: ${WHITELISTED_IPS:localhost,127.0.0.1}

spring:
  cache:
    cache-names:
      - buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
  application:
    name: bot
  jackson:
    time-zone: UTC

springdoc:
  api-docs:
    path: /swagger-ui

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml
